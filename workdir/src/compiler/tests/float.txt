fn float64_to_int() -> int32 {
    float64 f1 = 7.7;
    uint64 u1 = f1;
    uint32 u2 = f1;
    uint16 u3 = f1;
    uint8 u4 = f1;

    float64 f2 = -5.5;
    int64 i1 = f2;
    int32 i2 = f2;
    int16 i3 = f2;
    int8 i4 = f2;

    return (u1 + u2 + u3 + u4) + (i1 + i2 + i3 + i4);
}

fn float_fn(float32 a, float64 b, float32 c, float64 d, float32 e, float64 f) -> float64 {
    return a + b + c + d + e + f;
}

fn float32_to_int() -> int32 {
    float32 f1 = 5.5;
    uint64 u1 = f1;
    uint32 u2 = f1;
    uint16 u3 = f1;
    uint8 u4 = f1;

    float32 f2 = -7.7;
    int64 i1 = f2;
    int32 i2 = f2;
    int16 i3 = f2;
    int8 i4 = f2;

    return (u1 + u2 + u3 + u4) + (i1 + i2 + i3 + i4);
}

fn uint_to_float() -> float64 {
    uint64 u1 = 5;
    uint32 u2 = 6;
    uint16 u3 = 7;
    uint8 u4 = 8;

    float64 f1 = u1;
    float64 f2 = u2;
    float64 f3 = u3;
    float64 f4 = u4;

    float32 f5 = u1;
    float32 f6 = u2;
    float32 f7 = u3;
    float32 f8 = u4;
    return f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8;
}

fn int_to_float() -> float64 {
    int64 i1 = 5;
    int32 i2 = 6;
    int16 i3 = 7;
    int8 i4 = 8;

    float64 f1 = i1;
    float64 f2 = i2;
    float64 f3 = i3;
    float64 f4 = i4;

    float32 f5 = i1;
    float32 f6 = i2;
    float32 f7 = i3;
    float32 f8 = i4;
    return f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8;
}

fn float32_ops() -> float32 {
    float32 a = 1.2;
    float32 b = 3.4;

    float32 x = a + b;
    float32 y = a - b;
    float32 z = a * b;
    float32 w = a / b;
    float32 v = -a;

    return x + y + z + w + v;
}

fn float64_ops() -> float64 {
    float64 a = 8.2;
    float64 b = 9.4;

    float64 x = a + b;
    float64 y = a - b;
    float64 z = a * b;
    float64 w = a / b;
    float64 v = -a;

    return x + y + z + w + v;
}

fn main() -> uint64 {
    float64 x = float64_ops();
    float32 y = float32_ops();

    y = x;
    x = y;

    int32 a = float32_to_int();
    int32 b = float64_to_int();

    return a + b + uint_to_float() + int_to_float() + float_fn(x, y, x, y, x, y);
}

