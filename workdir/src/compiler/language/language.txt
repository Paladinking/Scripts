include: "ast.h";

atoms: kFn, kStruct, kIf, kWhile, kElse, kReturn, kTrue, kFalse,
       typeid, identifier, integer, real, string;

type: kFn = name_id;
type: kStruct = name_id;
type: kIf = name_id;
type: kWhile = name_id;
type: kElse = name_id;
type: kReturn = name_id;
type: kTrue = name_id;
type: kFalse = name_id;

type: typeid = type_id;
type: identifier = StrWithLength;
type: integer = uint64_t;
type: real = double;
type: string = StrWithLength;

type: BINOPERATOR = enum BinaryOperator;
type: UNARYOPERATOR = enum UnaryOperator;

type: EXPRESSION = Expression*;
type: EXPR = Expression*;
type: BINOP = Expression*;
type: UNOP = Expression*;
type: CALL = Expression*;
type: ARRAY_INDEX = Expression*;

type: COND = Expression*;

type: PTRDECL = uint64_t;

type: ?ASSIGN = Expression*;
type: STATEMENT = Statement*;
type: IF = Statement*;
type: ?ELSE = Statement*;
type: ELSE = void*;

type: STATEMENTS = Statements;
type: STATEMENT_LIST = StatementList*;

type: FUNCTION = FunctionDef*;
type: FN_HEAD = name_id;
type: ?RET_TYPE = type_id;

type: PARAM_LIST = ExpressionList*;
type: ?PARAM_LIST = ExpressionList*;

type: ARG = Arg*;
type: ?ARG_LIST = ArgList*;
type: ARG_LIST = ArgList*;

type: ARRAYDECL = ArraySizes*;

PROGRAM = '' |
          PROGRAM + FUNCTION;

FN_HEAD = kFn + identifier : OnFnHead;

FUNCTION = FN_HEAD + 
           '(' + ?ARG_LIST + ')' +
           ?RET_TYPE + STATEMENTS : OnFunction;

?RET_TYPE = '' :$ TYPE_ID_NONE |
            '->' + typeid :$ $0;


?ARG_LIST = '' :$ NULL |
            ARG_LIST :$ $0;

ARG_LIST = ARG : OnArgList |
           ARG_LIST + ',' + ARG : OnAddArgList;
ARG = typeid + identifier : OnArg |
      typeid + PTRDECL + identifier : OnPtrArg;

STATEMENTS = '{' + STATEMENT_LIST + '}' : OnStatements;

STATEMENT_LIST = '' :$ NULL |
                 STATEMENT_LIST + STATEMENT : OnStatementList;

STATEMENT = kWhile + COND + STATEMENTS : OnWhile |
            IF :$ $0 |
            typeid + ARRAYDECL + identifier + ?ASSIGN + ';' : OnDecl |
            typeid + PTRDECL + identifier + ?ASSIGN + ';' : OnPtrDecl |
            EXPRESSION + '=' + EXPRESSION + ';' : OnAssign |
            EXPRESSION + ';' : OnExprStatement |
            kReturn + EXPRESSION + ';' : OnReturn;

PTRDECL = '*' :$ 1 | 
          PTRDECL + '*' :$ 1 + $0;

ARRAYDECL = '' :$ NULL |
            ARRAYDECL + '[' + integer + ']' : OnArrayDecl;

?ASSIGN = '' :$ NULL |
          '=' + EXPRESSION :$ $0;

COND = '(' + EXPRESSION + ')' : OnCond;

ELSE = kElse: OnElseHead;

?ELSE = '' :$ NULL |
        kElse + IF :$ $1 |
        ELSE + STATEMENTS : OnElse;

IF = kIf + COND + STATEMENTS + ?ELSE : OnIf;

EXPR = kTrue : OnTrue |
       kFalse : OnFalse | 
       identifier : OnIdentExpr | 
       integer : OnInt |
       real : OnReal |
       string : OnString | 
       CALL :$ $0 |
       ARRAY_INDEX :$ $0 |
       '(' + EXPRESSION + ')' : OnParen;

EXPRESSION = EXPR  :$ $0 |
             BINOP :$ $0 |
             UNOP  :$ $0;

BINOPERATOR = '/' :$ BINOP_DIV | '*' :$ BINOP_MUL | '%' :$ BINOP_MOD |
              '-' :$ BINOP_SUB | '+' :$ BINOP_ADD |
              '<<' :$ BINOP_BIT_LSHIFT| '>>' :$ BINOP_BIT_RSHIFT |
              '<=' :$ BINOP_CMP_LE | '>=' :$ BINOP_CMP_GE | 
              '>' :$ BINOP_CMP_G | '<' :$ BINOP_CMP_L |
              '==' :$ BINOP_CMP_EQ | '!=' :$ BINOP_CMP_NEQ |
              '&'  :$ BINOP_BIT_AND |
              '^'  :$ BINOP_BIT_XOR |
              '|'  :$ BINOP_BIT_OR |
              '&&' :$ BINOP_BOOL_AND |
              '||' :$ BINOP_BOOL_OR;

UNARYOPERATOR = '~' :$ UNOP_BITNOT |
                '!' :$ UNOP_BOOLNOT |
                '-' :$ UNOP_NEGATIVE |
                '+' :$ UNOP_POSITIVE |
                '*' :$ UNOP_DEREF |
                '&' :$ UNOP_ADDROF;

BINOP = EXPRESSION + BINOPERATOR + EXPR : OnBinop1 |
        EXPRESSION + BINOPERATOR + UNOP : OnBinop2;

UNOP = UNARYOPERATOR + EXPR : OnUnop1 |
       UNARYOPERATOR + UNOP : OnUnop2;

CALL = EXPR + '(' + ?PARAM_LIST + ')' : OnCall;

?PARAM_LIST = '' :$ NULL |
              PARAM_LIST :$ $0;

PARAM_LIST = EXPRESSION : OnParamList |
             PARAM_LIST + ',' + EXPRESSION : OnAddParamList;

ARRAY_INDEX = EXPR + '[' + EXPRESSION + ']' : OnArrayIndex;
