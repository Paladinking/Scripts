// + is concatenation
// | means or

atoms: type, name, number, string, unop, binop;

PROGRAM = '' |
          PROGRAM + FUNCTION;

FUNCTION = 'fn' + name + 
           '(' + ?ARG_LIST + ')' +
           ?RET_TYPE + STATEMENTS;

?RET_TYPE = '' |
            '->' + type;


?ARG_LIST = '' |
            ARG_LIST;

ARG_LIST = ARG |
           ARG_LIST + ',' + ARG;

ARG = type + name;

STATEMENTS = '{' + STATEMENT_LIST + '}';

STATEMENT_LIST = '' |
                 STATEMENT_LIST + STATEMENT;

STATEMENT = WHILE |
            IF |
            DECLARATION + ';' |
            ASSIGNMENT + ';' |
            EXPRESSION + ';' |
            RETURN + ';';

DECLARATION = type + name + ?ASSIGN;

?ASSIGN = '' |
          '=' + EXPRESSION;

ASSIGNMENT = EXPRESSION + '=' + EXPRESSION;

COND = '(' + EXPRESSION + ')';

IF = 'if' + COND + STATEMENTS + ?ELSE;

?ELSE = '' |
        ELSE;

ELSE = 'else' + ?IFCOND;

?IFCOND = STATEMENTS | IF;

WHILE = 'while' + COND + STATEMENTS;

RETURN = 'return' + EXPRESSION;

EXPR = name | number | string | CALL | ARRAY_INDEX | '(' + EXPRESSION + ')';

EXPRESSION = EXPR | BINOP | UNOP;

BINOP = EXPRESSION + binop + EXPR |
        EXPRESSION + binop + UNOP;

UNOP = unop + EXPR |
       unop + UNOP;

CALL = EXPR + '(' + ?PARAM_LIST + ')';

?PARAM_LIST = '' |
              PARAM_LIST;

PARAM_LIST = EXPRESSION |
             PARAM_LIST + ',' + EXPRESSION;

ARRAY_INDEX = EXPR + '[' + EXPRESSION + ']';
