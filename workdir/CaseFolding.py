from typing import List, Tuple
import sys

def main() -> None:
    with open('CaseFolding.txt', 'r') as file:
        lines = [c.strip() for c in filter(lambda l: not l.strip().startswith('#'), file.read().split('\n'))]
    
    mappings: List[Tuple[int, int]] = []
    for line in lines:
        if not line:
            continue
        parts = line.split(';')
        if len(parts) < 3:
            print(f"Invalid line {line} found")
            exit(1)

        start = int(parts[0], 16)
        fold_type = parts[1].strip()
        end_parts = parts[2].strip().split(' ')
        if len(end_parts) > 1:
            assert fold_type == 'F'
            continue
        end = int(end_parts[0], 16)

        if fold_type == 'C' or fold_type == 'S':
            mappings.append((start, end))

    if not mappings:
        print("No data found", file=sys.stderr)
        exit(1)

    def _ascii_mapping(c: int) -> int:
        for m in mappings:
            if m[0] == c:
                return m[1]
        return c

    ascii_lookup = [
        str(_ascii_mapping(c)) for c in range(128)
    ]

    mappings = [(a, b) for (a, b) in mappings if a >= 128]

    print("// File generated by CaseFolding.py")
    print("#include \"unicode_utils.h\"")
    print("const uint8_t ascii_fold[] = {", end="")
    print(', '.join(ascii_lookup), end="")
    print("};\n")
    print("uint32_t unicode_case_fold_utf32(uint32_t c) {")
    print("    if (c < 128) {")
    print("        return ascii_fold[c];")
    print("    }")
    print("    switch (c) {")
    for (a, b) in mappings:
        print(f"    case {a}:")
        print(f"        return {b};")
    print("    default:")
    print("        return c;")
    print("    }")
    print("}\n")
    print("uint32_t unicode_case_fold_utf8(const uint8_t* in, uint32_t len, uint8_t* out) {")
    print("    if (in[0] < 128) {")
    print("        out[0] = ascii_fold[in[0]];")
    print("        return 1;")
    print("    }")
    print("    uint32_t c = in[0];")
    print("    switch (len) {")
    print("    case 4:")
    print("        c |= ((uint32_t)in[3]) << 24;")
    print("    case 3:")
    print("        c |= (((uint32_t)in[2]) << 16);")
    print("    case 2:")
    print("        c |= (((uint32_t)in[1]) << 8);")
    print("    }")
    print("    switch (c) {")
    for (a, b) in mappings:
        utf8a = chr(a).encode("utf8")
        utf8a = utf8a + b'\0' * (4 - len(utf8a))
        utf8b = chr(b).encode("utf8")
        utf8b = utf8b + b'\0' * (4 - len(utf8b))
        ca = (utf8a[0]) | (utf8a[1] << 8) | (utf8a[2] << 16) | (utf8a[3] << 24)
        cb = (utf8b[0]) | (utf8b[1] << 8) | (utf8b[2] << 16) | (utf8b[3] << 24)
        print(f"    case {ca}:")
        print(f"        c = {cb}; break;")
    print("    }")
    print("    out[0] = c & 0xff;")
    print("    out[1] = (c >> 8) & 0xff;")
    print("    out[2] = (c >> 16) & 0xff;")
    print("    out[3] = (c >> 24) & 0xff;")
    print("    return utf8_len_table[out[0]];")
    print("}")

if __name__ == "__main__":
    main()
